#!/usr/bin/env node

/**************************************************************************************************
 * hoobs-image                                                                                    *
 * Copyright (C) 2020 HOOBS                                                                       *
 *                                                                                                *
 * This program is free software: you can redistribute it and/or modify                           *
 * it under the terms of the GNU General Public License as published by                           *
 * the Free Software Foundation, either version 3 of the License, or                              *
 * (at your option) any later version.                                                            *
 *                                                                                                *
 * This program is distributed in the hope that it will be useful,                                *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of                                 *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                  *
 * GNU General Public License for more details.                                                   *
 *                                                                                                *
 * You should have received a copy of the GNU General Public License                              *
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.                          *
 **************************************************************************************************/

const OS = require("os");
const Semver = require("semver");
const Program = require("commander");
const Inquirer = require("inquirer");
const Loco = require("loco-api-js");
const { join } = require("path");
const { execSync } = require("child_process");
const { MongoClient } = require("mongodb");

const {
    existsSync,
    readFileSync,
    writeFileSync,
    unlinkSync,
    mkdirSync,
    rmSync,
} = require("fs");

const root = join(__dirname, "../");
const pjson = JSON.parse(readFileSync(join(root, "package.json")).toString());

const prompt = Inquirer.createPromptModule();
const user = OS.userInfo();

function execLocal(command, options) {
    try {
        return execSync(command, options || { cwd: root, stdio: "inherit" }).toString().trim();
    } catch (_error) {
        return "";
    }
}

function downloadRemote(credentials, source, destination) {
    execLocal(`sshpass -p '${credentials.pass}' scp ${credentials.user}@${credentials.host}:${source} ${destination}`);
}

function createRelease(repo, title, version, files, notes, beta) {
    if (beta) {
        execLocal(`gh release create v${version} ${files} -p -t '${title} ${version}' -n '${notes}'`, { cwd: repo, stdio: "inherit" });
    } else {
        execLocal(`gh release create v${version} ${files} -t '${title} ${version}' -n '${notes}'`, { cwd: repo, stdio: "inherit" });
    }
}

function checkEnviornment() {
    const signing = execLocal("command -v dpkg-sig", { stdio: "pipe" }).toString().replace(/\n/g, "").trim();
    const sshpass = execLocal("command -v sshpass", { stdio: "pipe" }).toString().replace(/\n/g, "").trim();
    const docker = execLocal("command -v docker", { stdio: "pipe" }).toString().replace(/\n/g, "").trim();
    const reprepro = execLocal("command -v reprepro", { stdio: "pipe" }).toString().replace(/\n/g, "").trim();
    const gh = execLocal("command -v gh", { stdio: "pipe" }).toString().replace(/\n/g, "").trim();

    if (process.platform === "linux" && (!signing || signing === "")) {
        console.log("dpkg-sig is not installed, https://git.io/JOKhF");

        return false;
    }

    if (process.platform === "linux" && (!sshpass || sshpass === "")) {
        console.log("sshpass is not installed, https://git.io/JOKhF");

        return false;
    }

    if (process.platform === "linux" && (!docker || docker === "")) {
        console.log("docker is not installed, https://git.io/JOKhF");

        return false;
    }

    if (process.platform === "linux" && (!reprepro || reprepro === "")) {
        console.log("reprepro is not installed, https://git.io/JOKhF");

        return false;
    }

    if (process.platform === "linux" && (!gh || gh === "")) {
        console.log("gh is not installed, https://git.io/JOKhF");

        return false;
    }

    if (
        !existsSync(join(root, "./cli", "package.json"))
     || !existsSync(join(root, "./gui", "package.json"))
     || !existsSync(join(root, "./hoobsd", "package.json"))
     || !existsSync(join(root, "./desktop", "package.json"))
     || !existsSync(join(root, "./migration", "package.json"))
    ) {
        console.log("workspace not initilized, https://git.io/JOKhF");

        return false;
    }

    if (!existsSync(join(root, "./hoobsd", ".env.production"))) {
        console.log("missing hoobsd production enviornment file, https://git.io/JOKhF");

        return false;
    }

    if (!existsSync(join(root, "./gui", ".env.production"))) {
        console.log("missing hoobs gui production enviornment file, https://git.io/JOKhF");

        return false;
    }

    if (!existsSync(join(root, "./security", "credentials.json"))) {
        console.log("missing security repository, https://git.io/JOKhF");

        return false;
    }

    return true;
}

async function buildPackages(version, built) {
    if (!existsSync(join(root, "builds"))) mkdirSync(join(root, "builds"));

    pjson.version = version;

    writeFileSync(join(root, "package.json"), JSON.stringify(pjson, null, 4));

    const working = {
        cli: JSON.parse(readFileSync(join(root, "./cli", "package.json")).toString()),
        gui: JSON.parse(readFileSync(join(root, "./gui", "package.json")).toString()),
        hoobsd: JSON.parse(readFileSync(join(root, "./hoobsd", "package.json")).toString()),
        desktop: JSON.parse(readFileSync(join(root, "./desktop", "package.json")).toString()),
        migration: JSON.parse(readFileSync(join(root, "./migration", "package.json")).toString()),
    }

    let darwin;

    if (!existsSync(join(root, "desktop/builds", `hoobs-desktop-v${working.desktop.version}.exe`)) || !existsSync(join(root, "desktop/builds", `hoobs-desktop-v${working.desktop.version}.dmg`))) {
        let confirm = false;

        confirm = (await prompt([{
            type: "confirm",
            name: "confirm",
            default: true,
            message: "Do you want to build HOOBS desktop",
            format: (value) => value.toLowerCase(),
        }])).confirm;

        if (confirm) {
            try {
                darwin = JSON.parse(readFileSync(join(OS.homedir(), "hoobs.darwin.build")).toString());
            } catch (_error) {
                darwin = undefined;
            }
    
            if (darwin) {
                confirm = (await prompt([{
                    type: "confirm",
                    name: "confirm",
                    default: true,
                    message: "Use stored build credentials",
                    format: (value) => value.toLowerCase(),
                }])).confirm;
            }
    
            if (!darwin || !confirm) {
                darwin = await prompt([{
                    type: "string",
                    name: "host",
                    message: "Enter the macOS build host",
                }, {
                    type: "string",
                    name: "user",
                    message: "Username",
                }, {
                    type: "password",
                    name: "pass",
                    message: "Password",
                }, {
                    type: "string",
                    name: "path",
                    default: "~/Projects/HOOBS",
                    message: "Project path",
                }, {
                    type: "string",
                    name: "gituser",
                    message: "GitHub Username",
                }, {
                    type: "password",
                    name: "gitpass",
                    message: "GitHub Password",
                }]);
            }

            if (darwin) {
                writeFileSync(join(OS.homedir(), "hoobs.darwin.build"), JSON.stringify(darwin, null, 4));
            } else if (existsSync(join(OS.homedir(), "hoobs.darwin.build"))) {
                unlinkSync(join(OS.homedir(), "hoobs.darwin.build"));
            }
        }
    }

    if (!execSync(root, "cli/builds", `hoobs-cli-v${working.cli.version}.deb`)) {
        console.log("building hoobs cli");
        execLocal(`bin/build --lint --pack`, { cwd: join(root, "./cli"), stdio: "inherit" });
        built.push("cli");
    }

    if (!execSync(join(root, "migration/builds", `hoobs-migration-v${working.migration.version}.tgz`))) {
        console.log("building hoobs migration tool");
        execLocal("bin/build --lint --pack", { cwd: join(root, "./migration"), stdio: "inherit" });
        built.push("migration");
    }

    if (!execSync(root, "hoobsd/builds", `hoobsd-v${working.hoobsd.version}.deb`)) {
        console.log("building hoobsd");
        execLocal(`bin/build --lint --pack`, { cwd: join(root, "./hoobsd"), stdio: "inherit" });
        built.push("hoobsd");
    }

    if (!execSync(root, "gui/builds", `hoobs-gui-v${working.gui.version}.deb`)) {
        console.log("building hoobs gui");

        execLocal(`bin/build --lint --pack`, { cwd: join(root, "./gui"), stdio: "inherit" });
        built.push("gui");
    }

    if (darwin && (!execSync(join(root, "desktop/builds", `hoobs-desktop-v${working.desktop.version}.exe`)) || !execSync(join(root, "desktop/builds", `hoobs-desktop-v${working.desktop.version}.dmg`)))) {
        console.log("building hoobs desktop");

        downloadRemote(darwin, join(darwin.path, "desktop/builds", `hoobs-desktop-v${working.desktop.version}.exe`), join(root, "desktop/builds", `hoobs-desktop-v${working.desktop.version}.exe`));
        downloadRemote(darwin, join(darwin.path, "desktop/builds", `hoobs-desktop-v${working.desktop.version}.dmg`), join(root, "desktop/builds", `hoobs-desktop-v${working.desktop.version}.dmg`));

        built.push("desktop");
    }

    if (!execSync(root, "builds", `hoobs-v${pjson.version}.deb`)) {
        console.log("building bundle");

        if (execSync(join(root, "dist"))) execLocal(`rm -fR ${join(root, "dist")}`)

        mkdirSync(join(root, "dist"));
        mkdirSync(join(root, "dist/DEBIAN"));

        let control = "";

        control += "Package: hoobs\n";
        control += `Version: ${pjson.version}\n`;
        control += "Section: base\n";
        control += "Priority: optional\n";
        control += "Architecture: all\n";
        control += "Depends: hoobs-cli (>= 4.0.0), hoobsd (>= 4.0.0), hoobs-gui (>= 4.0.0)\n";
        control += "Maintainer: HOOBS Maintainers <info@hoobs.org>\n";
        control += "Homepage: https://hoobs.org\n";
        control += "Description: Build your Smart Home with HOOBS. Connect over 2,000 Accessories to your favorite Ecosystem.\n";

        writeFileSync(join(root, "dist/DEBIAN/control"), control);
        execLocal(`cp ${join(root, "image/scripts", "postinst")} ${join(root, "dist/DEBIAN", "postinst")}`);
        execLocal(`chmod 755 ${join(root, "dist/DEBIAN", "postinst")}`);
        execLocal("dpkg-deb --build dist");

        if (existsSync(join(root, "builds", `hoobs-v${pjson.version}.deb`))) unlinkSync(join(root, "builds", `hoobs-v${pjson.version}.deb`));

        execLocal(`cp ${join(root, "dist.deb")} ${join(root, "builds", `hoobs-v${pjson.version}.deb`)}`);
        execLocal(`rm -f ${join(root, "dist.deb")}`);

        execLocal(`dpkg-sig --sign builder ${join(root, "builds", `hoobs-v${pjson.version}.deb`)}`);

        if (existsSync(join(root, "dist"))) execLocal(`rm -fR ${join(root, "dist")}`);
    }
}

function buildImage(node, built) {
    if (!existsSync(join(root, "builds"))) mkdirSync(join(root, "builds"));

    const working = {
        connect: JSON.parse(readFileSync(join(root, "./connect", "package.json")).toString()),
    }

    if (!execSync(join(root, "connect/builds", `hoobs-connect-v${working.connect.version}.tar.gz`))) {
        console.log("building hoobs connect");

        execLocal("bin/build", { cwd: join(root, "./connect"), stdio: "inherit" });
    }

    if (!execSync(join(root, "builds", `hoobs-v${pjson.version}.zip`))) {
        console.log("building image");

        execLocal("sudo docker rm -v hoobs-image", { cwd: join(root, "image"), stdio: "ignore" });

        if (execSync(join(root, "hoobs"))) rmSync(join(root, "image/hoobs.conf"));
        if (!execSync(join(root, "./image/stage3/01-wifi-connect/files"))) mkdirSync(join(root, "./image/stage3/01-wifi-connect/files"));

        execLocal(`cp ${join(root, "connect/builds", `hoobs-connect-v${working.connect.version}.tar.gz`)} ${join(root, "./image/stage3/01-wifi-connect/files", "hoobs-connect.tar.gz")}`);

        let variables = "";

        variables += "IMG_NAME=\"HOOBS\"\n";
        variables += `IMG_FILENAME="hoobs-${pjson.version}"\n`;
        variables += `ZIP_FILENAME="hoobs-${pjson.version}"\n`;
        variables += `NODE_RELEASE="${node}"\n`;
        variables += "WIFI_SSID=HOOBS\n";
        variables += "LOCALE_DEFAULT=\"en_US.UTF-8\"\n";
        variables += "KEYBOARD_KEYMAP=\"us\"\n";
        variables += "KEYBOARD_LAYOUT=\"English (US)\"\n";
        variables += "TIMEZONE_DEFAULT=\"America/Denver\"\n";
        variables += "TARGET_HOSTNAME=hoobs\n";
        variables += "FIRST_USER_NAME=hoobs\n";
        variables += "FIRST_USER_PASS=hoobsadmin\n";
        variables += "ENABLE_SSH=1\n";
        variables += "STAGE_LIST=\"stage0 stage1 stage2 stage3 stage4 stage5\"\n";

        writeFileSync(join(root, "image/hoobs.conf"), variables);

        execLocal(`${join(root, "image/container")} -c ${join(root, "image/hoobs.conf")}`, { cwd: join(root, "image"), stdio: "inherit" });

        execLocal(`sudo chown ${user.uid}:${user.gid} ${join(root, "image/deploy", `hoobs-${pjson.version}.zip`)}`, { cwd: join(root, "image"), stdio: "inherit" });
        execLocal(`sudo chown ${user.uid}:${user.gid} ${join(root, "image/deploy", `hoobs-${pjson.version}-box.zip`)}`, { cwd: join(root, "image"), stdio: "inherit" });
        execLocal(`sudo chown ${user.uid}:${user.gid} ${join(root, "image/deploy", `hoobs-${pjson.version}-headless.zip`)}`, { cwd: join(root, "image"), stdio: "inherit" });
        execLocal(`sudo chown ${user.uid}:${user.gid} ${join(root, "image/deploy", `hoobs-${pjson.version}.info`)}`, { cwd: join(root, "image"), stdio: "inherit" });
        execLocal(`sudo chown ${user.uid}:${user.gid} ${join(root, "image/deploy", `hoobs-${pjson.version}-box.info`)}`, { cwd: join(root, "image"), stdio: "inherit" });
        execLocal(`sudo chown ${user.uid}:${user.gid} ${join(root, "image/deploy", `hoobs-${pjson.version}-headless.info`)}`, { cwd: join(root, "image"), stdio: "inherit" });

        if (execSync(join(root, "builds", `hoobs-v${pjson.version}.zip`))) unlinkSync(join(root, "builds", `hoobs-v${pjson.version}.zip`))
        if (execSync(join(root, "builds", `hoobs-box-v${pjson.version}.zip`))) unlinkSync(join(root, "builds", `hoobs-box-v${pjson.version}.zip`))
        if (execSync(join(root, "builds", `hoobsd-v${pjson.version}.zip`))) unlinkSync(join(root, "builds", `hoobsd-v${pjson.version}.zip`))
        if (execSync(join(root, "builds", `hoobs-v${pjson.version}.info`))) unlinkSync(join(root, "builds", `hoobs-v${pjson.version}.info`))
        if (execSync(join(root, "builds", `hoobs-box-v${pjson.version}.info`))) unlinkSync(join(root, "builds", `hoobs-box-v${pjson.version}.info`))
        if (execSync(join(root, "builds", `hoobsd-v${pjson.version}.info`))) unlinkSync(join(root, "builds", `hoobsd-v${pjson.version}.info`))

        execLocal(`sudo mv ${join(root, "image/deploy", `hoobs-${pjson.version}.zip`)} ${join(root, "builds", `hoobs-v${pjson.version}.zip`)}`);
        execLocal(`sudo mv ${join(root, "image/deploy", `hoobs-${pjson.version}-box.zip`)} ${join(root, "builds", `hoobs-box-v${pjson.version}.zip`)}`);
        execLocal(`sudo mv ${join(root, "image/deploy", `hoobs-${pjson.version}-headless.zip`)} ${join(root, "builds", `hoobsd-v${pjson.version}.zip`)}`);
        execLocal(`sudo mv ${join(root, "image/deploy", `hoobs-${pjson.version}.info`)} ${join(root, "builds", `hoobs-v${pjson.version}.info`)}`);
        execLocal(`sudo mv ${join(root, "image/deploy", `hoobs-${pjson.version}-box.info`)} ${join(root, "builds", `hoobs-box-v${pjson.version}.info`)}`);
        execLocal(`sudo mv ${join(root, "image/deploy", `hoobs-${pjson.version}-headless.info`)} ${join(root, "builds", `hoobsd-v${pjson.version}.info`)}`);

        if (existsSync(join(root, "image/deploy"))) execLocal(`sudo rm -fR ${join(root, "image/deploy")}`);

        built.push("image");
        built.push("server");
        built.push("box");
    }
}

async function publishPackage(repo, credentials, built) {
    const working = {
        cli: JSON.parse(readFileSync(join(root, "./cli", "package.json")).toString()),
        gui: JSON.parse(readFileSync(join(root, "./gui", "package.json")).toString()),
        hoobsd: JSON.parse(readFileSync(join(root, "./hoobsd", "package.json")).toString()),
        desktop: JSON.parse(readFileSync(join(root, "./desktop", "package.json")).toString()),
        migration: JSON.parse(readFileSync(join(root, "./migration", "package.json")).toString()),
    }

    const exists = {
        migration: execLocal(`yarn info @hoobs/migration version | grep ${working.migration.version}`, { cwd: root }) === working.migration.version,
    }

    if (!exists.migration) {
        console.log("publishing hoobs migration tool");

        execLocal(`yarn publish --access public --new-version ${working.migration.version}`, { cwd: join(root, "./migration"), stdio: "inherit" });
    }

    console.log("updating repository");

    switch (repo) {
        case "stable":
            if (built.indexOf("cli") >= 0) {
                execLocal(`reprepro includedeb buster ${join(root, "cli/builds", `hoobs-cli-v${working.cli.version}.deb`)}`, { cwd: join(root, "repo/deb/stable"), stdio: "inherit" });
                execLocal(`reprepro includedeb buster ${join(root, "cli/builds", `hoobs-cli-v${working.cli.version}.deb`)}`, { cwd: join(root, "repo/deb/edge"), stdio: "inherit" });
            }

            if (built.indexOf("hoobsd") >= 0) {
                execLocal(`reprepro includedeb buster ${join(root, "hoobsd/builds", `hoobsd-v${working.hoobsd.version}.deb`)}`, { cwd: join(root, "repo/deb/stable"), stdio: "inherit" });
                execLocal(`reprepro includedeb buster ${join(root, "hoobsd/builds", `hoobsd-v${working.hoobsd.version}.deb`)}`, { cwd: join(root, "repo/deb/edge"), stdio: "inherit" });
            }

            if (built.indexOf("gui") >= 0) {
                execLocal(`reprepro includedeb buster ${join(root, "gui/builds", `hoobs-gui-v${working.gui.version}.deb`)}`, { cwd: join(root, "repo/deb/stable"), stdio: "inherit" });
                execLocal(`reprepro includedeb buster ${join(root, "gui/builds", `hoobs-gui-v${working.gui.version}.deb`)}`, { cwd: join(root, "repo/deb/edge"), stdio: "inherit" });
            }

            if (built.indexOf("image") >= 0) {
                execLocal(`reprepro includedeb buster ${join(root, "builds", `hoobs-v${pjson.version}.deb`)}`, { cwd: join(root, "repo/deb/stable"), stdio: "inherit" });
                execLocal(`reprepro includedeb buster ${join(root, "builds", `hoobs-v${pjson.version}.deb`)}`, { cwd: join(root, "repo/deb/edge"), stdio: "inherit" });
            }

            execLocal("reprepro list buster", { cwd: join(root, "repo/deb/stable"), stdio: "inherit" });
            execLocal("reprepro list buster", { cwd: join(root, "repo/deb/edge"), stdio: "inherit" });
            break;

        default:
            if (built.indexOf("cli") >= 0) execLocal(`reprepro includedeb buster ${join(root, "cli/builds", `hoobs-cli-v${working.cli.version}.deb`)}`, { cwd: join(root, "repo/deb/edge"), stdio: "inherit" });
            if (built.indexOf("hoobsd") >= 0) execLocal(`reprepro includedeb buster ${join(root, "hoobsd/builds", `hoobsd-v${working.hoobsd.version}.deb`)}`, { cwd: join(root, "repo/deb/edge"), stdio: "inherit" });
            if (built.indexOf("gui") >= 0) execLocal(`reprepro includedeb buster ${join(root, "gui/builds", `hoobs-gui-v${working.gui.version}.deb`)}`, { cwd: join(root, "repo/deb/edge"), stdio: "inherit" });
            if (built.indexOf("image") >= 0) execLocal(`reprepro includedeb buster ${join(root, "builds", `hoobs-v${pjson.version}.deb`)}`, { cwd: join(root, "repo/deb/edge"), stdio: "inherit" });

            execLocal("reprepro list buster", { cwd: join(root, "repo/deb/edge"), stdio: "inherit" });
            break;
    }

    if (built.indexOf("gui") >= 0 || built.indexOf("hoobsd") >= 0 || built.indexOf("cli") >= 0 || built.indexOf("image") >= 0) {
        console.log("syncing repository");

        execLocal("git pull", { cwd: join(root, "repo"), stdio: "inherit" });
        execLocal("git add --all", { cwd: join(root, "repo"), stdio: "inherit" });
        execLocal("git commit -m 'image push'", { cwd: join(root, "repo"), stdio: "inherit" });
        execLocal("git push", { cwd: join(root, "repo"), stdio: "inherit" });
    }

    if (repo === "edge" || repo === "stable") {
        const beta = repo === "edge";
        const client = new MongoClient(credentials.db, { useUnifiedTopology: true });

        await client.connect();

        const database = client.db("support");
        const releases = database.collection("releases");

        if (built.indexOf("migration") >= 0) {
            createRelease(
                join(root, "migration"),
                "HOOBS Migration",
                working.migration.version,
                join(root, "migration/builds", `hoobs-migration-v${working.migration.version}.tgz`),
                "HOOBS 4 Migration Utility.\n\n* Big fixes",
                false,
            );
        }

        if (built.indexOf("desktop") >= 0) {
            await releases.updateOne({ application: "desktop", latest: true, beta }, { $set: { latest: false } }, { upsert: true });

            if (!beta) await releases.updateOne({ application: "desktop", latest: true, beta: true }, { $set: { latest: false } }, { upsert: true });

            await releases.insertOne({
                application: "desktop",
                version: working.desktop.version,
                published: new Date(),
                latest: true,
                download_win: `https://github.com/hoobs-org/desktop/releases/download/v${working.desktop.version}/hoobs-desktop-v${working.desktop.version}.exe`,
                download_mac: `https://github.com/hoobs-org/desktop/releases/download/v${working.desktop.version}/hoobs-desktop-v${working.desktop.version}.dmg`,
                beta,
            });

            createRelease(
                join(root, "desktop"),
                "HOOBS Desktop",
                working.desktop.version,
                join(root, "desktop/builds", `hoobs-desktop-v${working.desktop.version}.*`),
                "HOOBS Desktop Application.\n\n* Big fixes",
                beta,
            );
        }
                
        if (built.indexOf("gui") >= 0) {
            await releases.updateOne({ application: "gui", latest: true, beta }, { $set: { latest: false } }, { upsert: true });

            if (!beta) await releases.updateOne({ application: "gui", latest: true, beta: true }, { $set: { latest: false } }, { upsert: true });

            await releases.insertOne({
                application: "gui",
                version: working.gui.version,
                published: new Date(),
                latest: true,
                download: `https://github.com/hoobs-org/gui/releases/download/v${working.gui.version}/hoobs-gui-v${working.gui.version}.tar.gz`,
                beta,
            });

            createRelease(
                join(root, "gui"),
                "HOOBS Web Interface",
                working.gui.version,
                join(root, "gui/builds", `hoobs-gui-v${working.gui.version}.tar.gz`),
                "Interface component for the certified HOOBS stack.\n\n* Big fixes",
                beta,
            );
        }

        if (built.indexOf("hoobsd") >= 0) {
            await releases.updateOne({ application: "hoobsd", latest: true, beta }, { $set: { latest: false } }, { upsert: true });

            if (!beta) await releases.updateOne({ application: "hoobsd", latest: true, beta: true }, { $set: { latest: false } }, { upsert: true });

            await releases.insertOne({
                application: "hoobsd",
                version: working.hoobsd.version,
                published: new Date(),
                latest: true,
                download: `https://github.com/hoobs-org/hoobsd/releases/download/v${working.hoobsd.version}/hoobsd-v${working.hoobsd.version}.tar.gz`,
                beta,
            });

            createRelease(
                join(root, "hoobsd"),
                "HOOBS Daemon",
                working.hoobsd.version,
                join(root, "hoobsd/builds", `hoobsd-v${working.hoobsd.version}.tar.gz`),
                "Server component for the certified HOOBS smart home stack.\n\n* Big fixes",
                beta,
            );
        }

        if (built.indexOf("cli") >= 0) {
            await releases.updateOne({ application: "hbs", latest: true, beta }, { $set: { latest: false } }, { upsert: true });
            await releases.updateOne({ application: "setup", latest: true, beta: false }, { $set: { latest: false } }, { upsert: true });

            if (!beta) await releases.updateOne({ application: "hbs", latest: true, beta: true }, { $set: { latest: false } }, { upsert: true });

            await releases.insertOne({
                application: "hbs",
                version: working.cli.version,
                published: new Date(),
                latest: true,
                download: `https://github.com/hoobs-org/cli/releases/download/v${working.cli.version}/hoobs-cli-v${working.cli.version}.tar.gz`,
                beta,
            });

            await releases.insertOne({
                application: "setup",
                version: working.cli.version,
                published: new Date(),
                latest: true,
                download: `https://dl.hoobs.org/stable`,
                beta: false,
            });

            createRelease(
                join(root, "cli"),
                "HOOBS Command Line",
                working.cli.version,
                join(root, "cli/builds", `hoobs-cli-v${working.cli.version}.tar.gz`),
                "Command line interface for the certified HOOBS smart home stack.\n\n* Big fixes",
                beta,
            );
        }
    }

    return;
}

async function publishImage(repo, credentials, built) {
    if (repo === "edge" || repo === "stable") {
        const beta = repo === "edge";
        const client = new MongoClient(credentials.db, { useUnifiedTopology: true });

        await client.connect();

        const database = client.db("support");
        const releases = database.collection("releases");

        if (built.indexOf("image") >= 0 || built.indexOf("server") >= 0 || built.indexOf("box") >= 0) {
            await releases.updateOne({ application: "image", latest: true, beta }, { $set: { latest: false } }, { upsert: true });
            await releases.updateOne({ application: "server", latest: true, beta }, { $set: { latest: false } }, { upsert: true });
            await releases.updateOne({ application: "box", latest: true, beta }, { $set: { latest: false } }, { upsert: true });

            if (!beta) {
                await releases.updateOne({ application: "image", latest: true, beta: true }, { $set: { latest: false } }, { upsert: true });
                await releases.updateOne({ application: "server", latest: true, beta: true }, { $set: { latest: false } }, { upsert: true });
                await releases.updateOne({ application: "box", latest: true, beta: true }, { $set: { latest: false } }, { upsert: true });
            }

            await releases.insertOne({
                application: "image",
                version: pjson.version,
                published: new Date(),
                latest: true,
                download: `https://github.com/hoobs-org/repo/releases/download/v${pjson.version}/hoobs-v${pjson.version}.zip`,
                beta,
            });

            await releases.insertOne({
                application: "server",
                version: pjson.version,
                published: new Date(),
                latest: true,
                download: `https://github.com/hoobs-org/repo/releases/download/v${pjson.version}/hoobsd-v${pjson.version}.zip`,
                beta,
            });

            await releases.insertOne({
                application: "box",
                version: pjson.version,
                published: new Date(),
                latest: true,
                download: `https://github.com/hoobs-org/repo/releases/download/v${pjson.version}/hoobs-box-v${pjson.version}.zip`,
                beta,
            });

            createRelease(
                join(root, "repo"),
                "HOOBS",
                pjson.version,
                join(root, "builds", `hoobs*-v${pjson.version}.*`),
                "HOOBS image for Raspberry Pi.\n\n* Big fixes",
                beta,
            );
        }
    }

    return;
}

Program.version(pjson.version, "-v, --version", "output the current version")
    .allowUnknownOption();

Program.command("release")
    .description("build hoobs image")
    .action(() => {
        if (process.platform === "linux" && checkEnviornment()) {
            const credentials = require("../security/credentials.json");

            prompt([{
                type: "list",
                name: "repo",
                message: "Select the repo to publish to",
                default: "edge",
                choices: [{
                    name: "Stable",
                    value: "stable"
                }, {
                    name: "Edge",
                    value: "edge"
                }],
            }, {
                type: "string",
                name: "version",
                default: pjson.version,
                message: "Enter the desired version",
                validate: (value) => {
                    if (!Semver.valid(value)) return "invalid version";

                    return true;
                },
            }, {
                type: "string",
                name: "node",
                default: "14",
                message: "Select node major version",
                validate: (value) => {
                    if (Number.isNaN(parseInt(value, 10))) return "invalid version";

                    return true;
                },
            }]).then(async (result) => {
                const built = [];

                await buildPackages(result.version, built);
                await publishPackage(result.repo, credentials, built);

                buildImage(result.node, built);

                await publishImage(result.repo, credentials, built);

                process.exit();
            });
        }
    });

Program.parse(process.argv);
